# This file is automatically generated. Edit at your own risk.
existing_devices:
  AttributeSignal:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  CS700TemperatureController:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  Control:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  CryoStat:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  CurrentEnable:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  CurrentSetterEpicSignal:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  DerivedSignal:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  Device:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  EpicsMotor:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  EpicsScaler:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  EpicsSignal:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  EpicsSignalPositioner:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  EpicsSignalRO:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  Eurotherm:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  FilterBank:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  FlakySignal:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  FlashPower:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  FlashRampInternals:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  GasSignal:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  HDF5Plugin:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  ImagePlugin:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  KeithlyMM:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  KeithlyMMChannel:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  LinkamFurnace:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  MM:
    classname: KeithlyMM
    is_flyable: false
    is_movable: false
    is_readable: true
    module: <run_path>
  PVPositioner:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  PerkinElmerContinuous:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  PerkinElmerContinuousStage:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  PerkinElmerDetector:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  PerkinElmerMulti:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  PerkinElmerStandard:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  PerkinElmerStandardV33:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  ProcessPlugin:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  QuadEMV33:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  RGA:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  ROIPlugin:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  Robot:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  SavedImageSignal:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  Signal:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  Slits:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  StatsPluginV33:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  TIFFPlugin:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  XPDGasSwitcher:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  XPDHDF5Plugin:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  XPDPerkinElmer:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  XPDQuadEM:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  XPDShutter:
    classname: type
    is_flyable: false
    is_movable: true
    is_readable: true
    module: builtins
  XPDTIFFPlugin:
    classname: type
    is_flyable: false
    is_movable: false
    is_readable: true
    module: builtins
  bpm1_y:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  bpm2_ydiode:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  bpm2_yfoil:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  ch:
    classname: EpicsSignalRO
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.signal
  cryostat:
    classname: CryoStat
    is_flyable: false
    is_movable: true
    is_readable: true
    module: <run_path>
  cs700:
    classname: CS700TemperatureController
    is_flyable: false
    is_movable: true
    is_readable: true
    module: <run_path>
  det:
    classname: PerkinElmerContinuous
    is_flyable: false
    is_movable: false
    is_readable: true
    module: <run_path>
  diff_tth_i:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  diff_tth_o:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  diff_x:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  diff_y:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  dlm_c1_bnd_bi:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  dlm_c1_bnd_bo:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  dlm_c1_bnd_ti:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  dlm_c1_bnd_to:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  dlm_c1_p:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  dlm_c1_xi:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  dlm_c1_xo:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  dlm_c2_bnd_bi:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  dlm_c2_bnd_bo:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  dlm_c2_bnd_ti:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  dlm_c2_bnd_to:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  dlm_c2_p:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  dlm_c2_r:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  dlm_c2_xi:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  dlm_c2_xo:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  dlm_c2_z:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  ecal_x:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  ecal_y:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  em:
    classname: EpicsScaler
    is_flyable: false
    is_movable: false
    is_readable: true
    module: ophyd.scaler
  eurotherm:
    classname: Eurotherm
    is_flyable: false
    is_movable: true
    is_readable: true
    module: <run_path>
  fast_shutter:
    classname: EpicsSignal
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.signal
  fb:
    classname: FilterBank
    is_flyable: false
    is_movable: false
    is_readable: true
    module: <run_path>
  flash_power:
    classname: FlashPower
    is_flyable: false
    is_movable: false
    is_readable: true
    module: <run_path>
  fltr1_y:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  fltr6_y:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  fs:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  fs2_y:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  fs3_y:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  gas:
    classname: XPDGasSwitcher
    is_flyable: false
    is_movable: true
    is_readable: true
    module: <run_path>
  hotairblower:
    classname: Eurotherm
    is_flyable: false
    is_movable: true
    is_readable: true
    module: <run_path>
  hrm_b:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  hrm_r:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  hrm_y:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  linkam_furnace:
    classname: LinkamFurnace
    is_flyable: false
    is_movable: true
    is_readable: true
    module: <run_path>
  p_diode:
    classname: EpicsSignal
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.signal
  pe1:
    classname: PerkinElmerStandardV33
    is_flyable: false
    is_movable: false
    is_readable: true
    module: <run_path>
  pe1_x:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  pe1_z:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  pe1c:
    classname: PerkinElmerContinuous
    is_flyable: false
    is_movable: false
    is_readable: true
    module: <run_path>
  pe1m:
    classname: PerkinElmerMulti
    is_flyable: false
    is_movable: false
    is_readable: true
    module: <run_path>
  pe2:
    classname: PerkinElmerStandardV33
    is_flyable: false
    is_movable: false
    is_readable: true
    module: <run_path>
  pe2c:
    classname: PerkinElmerContinuous
    is_flyable: false
    is_movable: false
    is_readable: true
    module: <run_path>
  pe2m:
    classname: PerkinElmerMulti
    is_flyable: false
    is_movable: false
    is_readable: true
    module: <run_path>
  pe3:
    classname: PerkinElmerStandardV33
    is_flyable: false
    is_movable: false
    is_readable: true
    module: <run_path>
  pe3c:
    classname: PerkinElmerContinuous
    is_flyable: false
    is_movable: false
    is_readable: true
    module: <run_path>
  pe3m:
    classname: PerkinElmerMulti
    is_flyable: false
    is_movable: false
    is_readable: true
    module: <run_path>
  qem1:
    classname: XPDQuadEM
    is_flyable: false
    is_movable: false
    is_readable: true
    module: <run_path>
  rga:
    classname: RGA
    is_flyable: false
    is_movable: false
    is_readable: true
    module: <run_path>
  ring_current:
    classname: EpicsSignalRO
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.signal
  robot:
    classname: Robot
    is_flyable: false
    is_movable: false
    is_readable: true
    module: <run_path>
  sample_x:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  sc:
    classname: EpicsScaler
    is_flyable: false
    is_movable: false
    is_readable: true
    module: ophyd.scaler
  shctl1:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  slt_h_i:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  slt_h_o:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  slt_h_xc:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  slt_h_xg:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  slt_mb1:
    classname: Slits
    is_flyable: false
    is_movable: false
    is_readable: true
    module: <run_path>
  slt_mb2:
    classname: Slits
    is_flyable: false
    is_movable: false
    is_readable: true
    module: <run_path>
  ss_cam_x:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  ss_fine_x:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  ss_fine_y:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  ss_hrm:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  ss_stg2_x:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  ss_stg2_y:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  ss_stg2_z:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  th:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  th_cal:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  tth:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  tth_cal:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  vfm_bnd:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  vfm_bnd_d:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  vfm_bnd_ofst:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  vfm_bnd_u:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  vfm_p:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  vfm_r:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  vfm_y:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  vfm_yd:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  vfm_yui:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
  vfm_yuo:
    classname: EpicsMotor
    is_flyable: false
    is_movable: true
    is_readable: true
    module: ophyd.epics_motor
existing_plans:
  Ecal:
    description: "This is the new Ecal scan for dips.\n    We should treat peaks separately\
      \ to simplify matters (leaves for\n    easier tweaking)"
    name: Ecal
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: wguess
    - default: None
      description: list of detectors. Defaults to [sc] detector
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - default: None
      description: the motor to scan on (th_cal). Defaults to th_cal
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - default: '0.0012'
      description: 'the max_step to scan on. This is the step size we use for

        the coarse initial scan'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: coarse_step
    - default: '120'
      description: the number of steps to take for coarse scan
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: coarse_nsteps
    - default: '''Si'''
      description: 'the reference sample to use for the calculation of the d spacings

        Defaults to "Si"'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: D
    - default: '''sc_chan1'''
      description: the name of the detector
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detector_name
    - default: '-35.26'
      description: the offset of theta zero estimated from the sample
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: theta_offset
    - default: '0.1'
      description: 'the fraction of sigma per point for the fine scan

        (the sigma used is the fitted sigma)'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: nsigma_fine
    - default: '5'
      description: 'the range to scan for fine scan:

        +/- nsigma_range*fitted_sigma

        where fitted_sigma is the sigma obtained from the fit from

        the coarse scan'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: nsigma_range
    - default: '''result.csv'''
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: output_file
    - default: '''th'''
      description: the type of motor used, ether "th" (theta) or "tth"(two-theta)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor_type
    properties:
      is_generator: true
  MED:
    description: '1. Start flowing the initial gas.

      2. Scan the temperature from minT to maxT in `num_steps` evenly-spaced steps.

      3. Hold temperature at maxT and take  `num_steady` images.

      4. Repeat (2) and (3) `num_loops` times.

      5. Switch the gas to `other_gas` and take `num_trans` acquisitions.

      6. Switch it back and take another `num_trans` acquisitions.'
    name: MED
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: init_gas
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: other_gas
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: minT
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: maxT
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num_steps
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num_steady
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num_trans
    - default: '2'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num_loops
    properties:
      is_generator: true
  SBU_plan:
    name: SBU_plan
    parameters:
    - annotation:
        type: int
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: sample_number
    - annotation:
        type: float
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: ti_fraction
    - annotation:
        type: int
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: temperature
    - annotation:
        type: int
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: annealing_time
    - annotation:
        type: float
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: exposure
    - annotation:
        type: int
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: thickness
    - annotation:
        type: int
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - annotation:
        type: float
      default: '2'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: rocking_range
    - default: None
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  Tramp:
    name: Tramp
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: sample
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: exposure
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stop
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: step
    properties:
      is_generator: true
  Tramp_gas_plan:
    description: Tramp-type scan with rga gas reading
    name: Tramp_gas_plan
    parameters:
    - description: List of detectors will be triggered and recored.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: 'e.g., ''He'', default is ''He''

        These gas must be in `gas.gas_list` but they may be in any order.'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: gas_in
    - description: exposure time in seconds
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: exp_time
    - description: starting point of temperature sequence.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: Tstart
    - description: stoping point of temperature sequence.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: Tstop
    - description: step size between Tstart and Tstop of this sequence.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: Tstep
    - default: '[''mass1'', ''mass2'', ''mass3'', ''mass4'', ''mass5'', ''mass6'']'
      description: a list of rga masses will be appearing in a live table
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: rga_masses
    properties:
      is_generator: true
  _dpp:
    description: Work with a deconsructed pseudo positioner.
    module: ae_gpcam.plans
    name: deconstructed_pseudo_plan
    parameters:
    - description: 'The detector to read at each point.  The dependent keys that the

        recommendation engine is looking for must be provided by these

        devices.'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: dets
    - description: 'The first point of the scan.  These values will be passed to the

        forward function and the objects passed in real_motors will be moved.


        The order is (Ti_frac, temperature, annealing_time)'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: point
    - default: '30'
      description: The detector exposure time.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: exposure
    - default: '2'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: rocking_range
    - default: '3'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - default: None
      description: Any extra meta-data to put in the Start document
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: md
    - description: "Expected to have two attributes 'forward' and 'inverse'\n\nThe\
        \ forward transforms from \"data coordinates\" (Ti fraction,\ntemperature,\
        \ annealing time) to \"beam line\" (x/y motor\nposition) coordinates ::\n\n\
        \   def forward(Ti, temperature, time):\n        return x, y\n\nThe inverse\
        \ transforms from \"beam line\" (x/y motor position)\ncoordinates to \"data\
        \ coordinates\" (Ti fraction, temperature,\nannealing time) ::\n\n   def inverse(x,\
        \ y):\n        return Ti_frac, temperature, annealing_time"
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: transform_pair
    - description: The real (x, y) motors to move.
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: real_motors
    - kind:
        name: KEYWORD_ONLY
        value: 3
      name: pseudo_signals
    - description: "\"snaps\" the requested measurement to the nearest available point\
        \ ::\n\n   def snap(Ti, temperature, time):\n       returns snapped_Ti, snapped_temperature,\
        \ snapped_time"
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: snap_function
    - default: None
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: take_data
    properties:
      is_generator: true
  _inner_loop:
    description: Helper plan for the inner loop of the sinter plans
    name: _inner_loop
    parameters:
    - description: The detectors passed to per_step
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: dets
    - description: The maximum number of times to call per_step
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: exposure_count
    - description: The target delay between subsequent starts of per_step.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: delay
    - description: 'Wall time to be done by.  Under no condition take longer

        than this to completely run through plan.'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: deadline
    - description: 'The plan to run ''per step''.


        This is the signature of triger_and_read'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: per_step
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stream_name
    - default: None
      description: If passed, will exit early when goes to 1
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: done_signal
    properties:
      is_generator: true
  _load_sample:
    name: _load_sample
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: msg
    properties:
      is_generator: true
  _setup_mm:
    name: _setup_mm
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: mm_mode
    properties:
      is_generator: true
  _unload_sample:
    name: _unload_sample
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: msg
    properties:
      is_generator: true
  abs_set:
    description: Set a value. Optionally, wait for it to complete before continuing.
    module: bluesky.plan_stubs
    name: abs_set
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - description: passed to obj.set()
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: identifier used by 'wait'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - default: 'False'
      description: 'If True, wait for completion before processing any more messages.

        False by default.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: wait
    - description: passed to obj.set()
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: true
  adaptive_scan:
    description: Scan over one variable with adaptively tuned step size.
    module: bluesky.plans
    name: adaptive_scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: data field whose output is the focus of the adaptive tuning
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: target_field
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - description: starting position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start
    - description: ending position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stop
    - description: smallest step for fast-changing regions
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: min_step
    - description: largest step for slow-chaning regions
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: max_step
    - description: desired fractional change in detector signal between steps
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: target_delta
    - description: whether backward steps are allowed -- this is concern with some
        motors
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: backstep
    - default: '0.8'
      description: threshold for going backward and rescanning a region, default is
        0.8
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: threshold
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  broadcast_msg:
    description: Generate many copies of a message, applying it to a list of devices.
    module: bluesky.plan_stubs
    name: broadcast_msg
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: command
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: objs
    - kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: true
  caching_repeater:
    description: Generate n chained copies of the messages in a plan.
    module: bluesky.plan_stubs
    name: caching_repeater
    parameters:
    - description: total number of repetitions; if None, infinite
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: n
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: plan
    properties:
      is_generator: true
  checkpoint:
    description: If interrupted, rewind to this point.
    module: bluesky.plan_stubs
    name: checkpoint
    parameters: []
    properties:
      is_generator: true
  clear_checkpoint:
    description: Designate that it is not safe to resume. If interrupted or paused,
      abort.
    module: bluesky.plan_stubs
    name: clear_checkpoint
    parameters: []
    properties:
      is_generator: true
  close_run:
    description: Mark the end of the current 'run'. Emit a RunStop document.
    module: bluesky.plan_stubs
    name: close_run
    parameters:
    - default: None
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: exit_status
    - default: None
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: reason
    properties:
      is_generator: true
  close_shutter_stub:
    description: 'simple function to return a generator that yields messages to

      close the shutter'
    module: xpdacq.beamtime
    name: close_shutter_stub
    parameters: []
    properties:
      is_generator: true
  collect:
    description: Collect data cached by a fly-scanning device and emit documents.
    module: bluesky.plan_stubs
    name: collect
    parameters:
    - description: Device with 'kickoff', 'complete', and 'collect' methods
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - default: 'False'
      description: 'If False (default), emit Event documents in one bulk dump. If
        True,

        emit events one at time.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: stream
    - default: 'True'
      description: 'If True (default), return the collected Events. If False, return
        None.

        Using ``stream=True`` and ``return_payload=False`` together avoids

        accumulating the documents in memory: they are emitted as they are

        collected, and they are not accumulated.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: return_payload
    properties:
      is_generator: true
  complete:
    description: Tell a flyer, 'stop collecting, whenever you are ready'.
    module: bluesky.plan_stubs
    name: complete
    parameters:
    - description: Device with 'kickoff', 'complete', and 'collect' methods
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - default: None
      description: identifier used by 'wait'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - default: 'False'
      description: 'If True, wait for completion before processing any more messages.

        False by default.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: wait
    - description: passed through to ``obj.complete()``
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: true
  configure:
    description: Change Device configuration and emit an updated Event Descriptor
      document.
    module: bluesky.plan_stubs
    name: configure
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - description: passed through to ``obj.configure()``
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - description: passed through to ``obj.configure()``
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: true
  count:
    description: Take one or more readings from detectors.
    module: bluesky.plans
    name: count
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - default: '1'
      description: 'number of readings to take; default is 1


        If None, capture data until canceled'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - default: None
      description: Time delay in seconds between successive readings; default is 0.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: delay
    - default: None
      description: "hook for customizing action of inner loop (messages per step)\n\
        Expected signature ::\n\n   def f(detectors: Iterable[OphydObj]) -> Generator[Msg]:\n\
        \       ..."
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_shot
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  create:
    description: Bundle future readings into a new Event document.
    module: bluesky.plan_stubs
    name: create
    parameters:
    - default: '''primary'''
      description: 'name given to event stream, used to convenient identification

        default is ''primary'''
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: name
    properties:
      is_generator: true
  ct:
    description: 'Capture how many exposures are needed to get a total exposure

      of the given value, and sum those into one file before saving.'
    name: ct
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: sample
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: exposure
    properties:
      is_generator: true
  deferred_pause:
    description: Pause at the next checkpoint.
    module: bluesky.plan_stubs
    name: deferred_pause
    parameters: []
    properties:
      is_generator: true
  drop:
    description: Drop a bundle of readings without emitting a completed Event document.
    module: bluesky.plan_stubs
    name: drop
    parameters: []
    properties:
      is_generator: true
  example:
    name: example
    parameters: []
    properties:
      is_generator: true
  excel_example:
    description: 'Example: RE(excel_example(''/XF28IDC/XF28ID2/pe2_data/xpdUser/Import/example-with-dan.xlsx''))'
    name: excel_example
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: filename
    - default: None
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: geometry
    properties:
      is_generator: true
  finalize_ecal:
    name: finalize_ecal
    parameters: []
    properties:
      is_generator: true
  flash_ramp:
    description: Run a current ramp
    name: flash_ramp
    parameters:
    - description: 'The start and end points of the current ramp


        In mA'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start_I
    - description: 'The start and end points of the current ramp


        In mA'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stop_I
    - description: 'The rate of current change.


        In mA/min'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: ramp_rate
    - description: The voltage limit through the current ramp.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: voltage
    - description: 'The total exposure time for the detector.


        This is set via _configure_area_detector which is

        implicitly coupled to xpd_configuration[''area_det'']'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: total_exposure
    - description: 'The metadata to put into the runstart.  Will have

        some defaults added'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: md
    - default: None
      description: "The detectors to trigger at each point.\n\nIf None, defaults to::\n\
        \n  [xpd_configuration['area_det']]"
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: dets
    - default: '1'
      description: The time lag between subsequent data acquisition
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: delay
    - default: '''Current'''
      description: The thing to measure from the Keithly multimeter.
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: mm_mode
    - default: '0'
      description: How long to hold at the top of the ramp, defalts to 0
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: hold_time
    - default: None
      description: 'The inner-most data acquisition loop.


        This plan will be repeated as many times as possible (with

        the target *delay* between starting the plan.


        If the plan take longer than *delay* to run it will

        immediately be restarted.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: 'True'
      description: 'If the plan should try to open and close the shutter


        defaults to True'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: control_shutter
    properties:
      is_generator: true
  flash_step:
    description: Run a step-series of current/voltage.
    name: flash_step
    parameters:
    - description: 'The required columns are {"I", "V", "t"} which are

        the current, voltage, and hold time respectively.'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: VIT_table
    - description: 'The total exposure time for the detector.


        This is set via _configure_area_detector which is

        implicitly coupled to xpd_configuration[''area_det'']'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: total_exposure
    - description: 'The metadata to put into the runstart.  Will have

        some defaults added'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: md
    - default: None
      description: "The detectors to trigger at each point.\n\nIf None, defaults to::\n\
        \n  [xpd_configuration['area_det']]"
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: dets
    - default: '1'
      description: The time lag between subsequent data acquisition
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: delay
    - default: '''Current'''
      description: The thing to measure from the Keithly multimeter.
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: mm_mode
    - default: None
      description: 'The inner-most data acquisition loop.


        This plan will be repeated as many times as possible (with

        the target *delay* between starting the plan.


        If the plan take longer than *delay* to run it will

        immediately be restarted.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: 'True'
      description: 'If the plan should try to open and close the shutter


        defaults to True'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: control_shutter
    properties:
      is_generator: true
  fly:
    description: Perform a fly scan with one or more 'flyers'.
    module: bluesky.plans
    name: fly
    parameters:
    - description: objects that support the flyer interface
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: flyers
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  gas_plan:
    description: 'Example:'
    name: gas_plan
    parameters:
    - description: 'e.g., ''He'', default is ''He''

        These gas must be in `gas.gas_list` but they may be in any order.'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: gas_in
    - default: '[''mass1'', ''mass2'', ''mass3'', ''mass4'', ''mass5'', ''mass6'']'
      description: a list of rga masses appearing in a live table
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: rga_masses
    properties:
      is_generator: true
  gas_plan_with_detector:
    description: 'Example:'
    name: gas_plan_with_detector
    parameters:
    - description: 'e.g., ''He'', default is ''He''

        These gas must be in `gas.gas_list` but they may be in any order.'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: gas_in
    - default: '[''mass1'', ''mass2'', ''mass3'', ''mass4'', ''mass5'', ''mass6'']'
      description: a list of rga masses appearing in a live table
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: rga_masses
    - default: None
      description: detector to use
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: det
    - default: '5'
      description: exposure time in seconds
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: exp_time
    - default: '1'
      description: number of exposures
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num_exp
    - default: '1'
      description: delay between exposures in seconds
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: delay
    properties:
      is_generator: true
  grid_scan:
    description: Scan over a mesh; each motor is on an independent trajectory.
    module: bluesky.plans
    name: grid_scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: 'which axes should be snaked, either ``False`` (do not snake any
        axes),

        ``True`` (snake all axes) or a list of axes to snake. "Snaking" an axis

        is defined as following snake-like, winding trajectory instead of a

        simple left-to-right trajectory. The elements of the list are motors

        that are listed in `args`. The list must not contain the slowest

        (first) motor, since it can''t be snaked.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: snake_axes
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  initialize_ecal:
    description: Prepare for an energy calibration scan (Ecal)
    name: initialize_ecal
    parameters: []
    properties:
      is_generator: true
  inner_product_scan:
    module: bluesky.plans
    name: inner_product_scan
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  input_plan:
    description: Prompt the user for text input.
    module: bluesky.plan_stubs
    name: input_plan
    parameters:
    - default: ''''''
      description: prompt string, e.g., 'enter user name' or 'enter next position'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: prompt
    properties:
      is_generator: true
  install_suspender:
    description: Install a suspender during a plan.
    module: bluesky.plan_stubs
    name: install_suspender
    parameters:
    - description: The suspender to install
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: suspender
    properties:
      is_generator: true
  kickoff:
    description: Kickoff a fly-scanning device.
    module: bluesky.plan_stubs
    name: kickoff
    parameters:
    - description: Device with 'kickoff', 'complete', and 'collect' methods
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - default: None
      description: identifier used by 'wait'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - default: 'False'
      description: 'If True, wait for completion before processing any more messages.

        False by default.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: wait
    - description: passed through to ``obj.kickoff()``
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: true
  list_grid_scan:
    description: Scan over a mesh; each motor is on an independent trajectory.
    module: bluesky.plans
    name: list_grid_scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: "patterned like (``motor1, position_list1,``\n                ``motor2,\
        \ position_list2,``\n                ``motor3, position_list3,``\n       \
        \         ``...,``\n                ``motorN, position_listN``)\n\nThe first\
        \ motor is the \"slowest\", the outer loop. ``position_list``'s\nare lists\
        \ of positions, all lists must have the same length. Motors\ncan be any 'settable'\
        \ object (motor, temp controller, etc.)."
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: 'False'
      description: 'which axes should be snaked, either ``False`` (do not snake any
        axes),

        ``True`` (snake all axes) or a list of axes to snake. "Snaking" an axis

        is defined as following snake-like, winding trajectory instead of a

        simple left-to-right trajectory.The elements of the list are motors

        that are listed in `args`. The list must not contain the slowest

        (first) motor, since it can''t be snaked.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: snake_axes
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  list_scan:
    description: Scan over one or more variables in steps simultaneously (inner product).
    module: bluesky.plans
    name: list_scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: "For one dimension, ``motor, [point1, point2, ....]``.\nIn general:\n\
        \n.. code-block:: python\n\n    motor1, [point1, point2, ...],\n    motor2,\
        \ [point1, point2, ...],\n    ...,\n    motorN, [point1, point2, ...]\n\n\
        Motors can be any 'settable' object (motor, temp controller, etc.)"
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: 'hook for customizing action of inner loop (messages per step)

        Expected signature:

        ``f(detectors, motor, step) -> plan (a generator)``'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  load_sample:
    name: load_sample
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: position
    - default: None
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: geometry
    properties:
      is_generator: true
  log_scan:
    description: Scan over one variable in log-spaced steps.
    module: bluesky.plans
    name: log_scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - description: starting position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start
    - description: ending position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stop
    - description: number of steps
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - default: None
      description: 'hook for customizing action of inner loop (messages per step)

        Expected signature: ``f(detectors, motor, step)``'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  monitor:
    description: Asynchronously monitor for new values and emit Event documents.
    module: bluesky.plan_stubs
    name: monitor
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - default: None
      description: name of event stream; default is None
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: name
    - description: passed through to ``obj.subscribe()``
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: true
  mov:
    description: Move one or more devices to a setpoint. Wait for all to complete.
    module: bluesky.plan_stubs
    name: mv
    parameters:
    - description: device1, value1, device2, value2, ...
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: Used to mark these as a unit to be waited on.
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - description: passed to obj.set()
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: true
  move_per_step:
    description: Inner loop of an N-dimensional step scan without any readings
    module: bluesky.plan_stubs
    name: move_per_step
    parameters:
    - description: mapping motors to positions in this step
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: step
    - description: mapping motors to their last-set positions
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: pos_cache
    properties:
      is_generator: true
  movr:
    description: Move one or more devices to a relative setpoint. Wait for all to
      complete.
    module: bluesky.plan_stubs
    name: mvr
    parameters:
    - description: device1, value1, device2, value2, ...
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: Used to mark these as a unit to be waited on.
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - description: passed to obj.set()
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: true
  mv:
    description: Move one or more devices to a setpoint. Wait for all to complete.
    module: bluesky.plan_stubs
    name: mv
    parameters:
    - description: device1, value1, device2, value2, ...
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: Used to mark these as a unit to be waited on.
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - description: passed to obj.set()
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: true
  mvr:
    description: Move one or more devices to a relative setpoint. Wait for all to
      complete.
    module: bluesky.plan_stubs
    name: mvr
    parameters:
    - description: device1, value1, device2, value2, ...
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: Used to mark these as a unit to be waited on.
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - description: passed to obj.set()
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: true
  'null':
    description: Yield a no-op Message. (Primarily for debugging and testing.)
    module: bluesky.plan_stubs
    name: 'null'
    parameters: []
    properties:
      is_generator: true
  open_run:
    description: Mark the beginning of a new 'run'. Emit a RunStart document.
    module: bluesky.plan_stubs
    name: open_run
    parameters:
    - default: None
      description: metadata
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: md
    properties:
      is_generator: true
  open_shutter_stub:
    description: 'simple function to return a generator that yields messages to

      open the shutter'
    module: xpdacq.beamtime
    name: open_shutter_stub
    parameters: []
    properties:
      is_generator: true
  outer_product_scan:
    description: Scan over a mesh; each motor is on an independent trajectory.
    module: bluesky.plans
    name: grid_scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: 'which axes should be snaked, either ``False`` (do not snake any
        axes),

        ``True`` (snake all axes) or a list of axes to snake. "Snaking" an axis

        is defined as following snake-like, winding trajectory instead of a

        simple left-to-right trajectory. The elements of the list are motors

        that are listed in `args`. The list must not contain the slowest

        (first) motor, since it can''t be snaked.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: snake_axes
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  pause:
    description: Pause and wait for the user to resume.
    module: bluesky.plan_stubs
    name: pause
    parameters: []
    properties:
      is_generator: true
  pchain:
    description: Like `itertools.chain` but using `yield from`
    module: bluesky.preprocessors
    name: pchain
    parameters:
    - description: generators (plans)
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    properties:
      is_generator: true
  print_summary_wrapper:
    description: Print summary of plan as it goes by
    module: bluesky.preprocessors
    name: print_summary_wrapper
    parameters:
    - description: Must yield `Msg` objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: plan
    properties:
      is_generator: true
  ramp_plan:
    description: Take data while ramping one or more positioners.
    module: bluesky.plans
    name: ramp_plan
    parameters:
    - description: 'plan to start the ramp.  This will be run inside of a open/close

        run.


        This plan must return a `ophyd.StatusBase` object.'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: go_plan
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: monitor_sig
    - description: 'generator which takes no input


        This will be called for every data point.  This should create

        one or more events.'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: inner_plan_func
    - default: 'True'
      description: If True, add a pre data at beginning
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: take_pre_data
    - default: None
      description: 'If not None, the maximum time the ramp can run.


        In seconds'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: timeout
    - default: None
      description: 'If not None, take data no faster than this.  If None, take

        data as fast as possible


        If running the inner plan takes longer than `period` than take

        data with no dead time.


        In seconds.'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: period
    - default: None
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: md
    properties:
      is_generator: true
  rd:
    description: Reads a single-value non-triggered object
    module: bluesky.plan_stubs
    name: rd
    parameters:
    - description: The device to be read
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - default: '0'
      description: "The value to return when not running in a \"live\" RunEngine.\n\
        This come ups when ::\n\n   ret = yield Msg('read', obj)\n   assert ret is\
        \ None\n\nthe plan is passed to `list` or some other iterator that\nrepeatedly\
        \ sends `None` into the plan to advance the\ngenerator."
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: default_value
    properties:
      is_generator: true
  read:
    description: Take a reading and add it to the current bundle of readings.
    module: bluesky.plan_stubs
    name: read
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    properties:
      is_generator: true
  rel_adaptive_scan:
    description: Relative scan over one variable with adaptively tuned step size.
    module: bluesky.plans
    name: rel_adaptive_scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: data field whose output is the focus of the adaptive tuning
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: target_field
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - description: starting position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start
    - description: ending position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stop
    - description: smallest step for fast-changing regions
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: min_step
    - description: largest step for slow-chaning regions
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: max_step
    - description: desired fractional change in detector signal between steps
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: target_delta
    - description: whether backward steps are allowed -- this is concern with some
        motors
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: backstep
    - default: '0.8'
      description: threshold for going backward and rescanning a region, default is
        0.8
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: threshold
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  rel_grid_scan:
    description: Scan over a mesh relative to current position.
    module: bluesky.plans
    name: rel_grid_scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: 'which axes should be snaked, either ``False`` (do not snake any
        axes),

        ``True`` (snake all axes) or a list of axes to snake. "Snaking" an axis

        is defined as following snake-like, winding trajectory instead of a

        simple left-to-right trajectory. The elements of the list are motors

        that are listed in `args`. The list must not contain the slowest

        (first) motor, since it can''t be snaked.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: snake_axes
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  rel_list_grid_scan:
    description: 'Scan over a mesh; each motor is on an independent trajectory. Each
      point is

      relative to the current position.'
    module: bluesky.plans
    name: rel_list_grid_scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: "patterned like (``motor1, position_list1,``\n                ``motor2,\
        \ position_list2,``\n                ``motor3, position_list3,``\n       \
        \         ``...,``\n                ``motorN, position_listN``)\n\nThe first\
        \ motor is the \"slowest\", the outer loop. ``position_list``'s\nare lists\
        \ of positions, all lists must have the same length. Motors\ncan be any 'settable'\
        \ object (motor, temp controller, etc.)."
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: 'False'
      description: 'which axes should be snaked, either ``False`` (do not snake any
        axes),

        ``True`` (snake all axes) or a list of axes to snake. "Snaking" an axis

        is defined as following snake-like, winding trajectory instead of a

        simple left-to-right trajectory.The elements of the list are motors

        that are listed in `args`. The list must not contain the slowest

        (first) motor, since it can''t be snaked.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: snake_axes
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  rel_list_scan:
    description: Scan over one variable in steps relative to current position.
    module: bluesky.plans
    name: rel_list_scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: "For one dimension, ``motor, [point1, point2, ....]``.\nIn general:\n\
        \n.. code-block:: python\n\n    motor1, [point1, point2, ...],\n    motor2,\
        \ [point1, point2, ...],\n    ...,\n    motorN, [point1, point2, ...]\n\n\
        Motors can be any 'settable' object (motor, temp controller, etc.)\npoint1,\
        \ point2 etc are relative to the current location."
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: 'hook for customizing action of inner loop (messages per step)

        Expected signature: ``f(detectors, motor, step)``'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  rel_log_scan:
    description: Scan over one variable in log-spaced steps relative to current position.
    module: bluesky.plans
    name: rel_log_scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - description: starting position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start
    - description: ending position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stop
    - description: number of steps
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - default: None
      description: 'hook for customizing action of inner loop (messages per step)

        Expected signature: ``f(detectors, motor, step)``'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  rel_scan:
    description: Scan over one multi-motor trajectory relative to current position.
    module: bluesky.plans
    name: rel_scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: "For one dimension, ``motor, start, stop``.\nIn general:\n\n..\
        \ code-block:: python\n\n    motor1, start1, stop1,\n    motor2, start2, start2,\n\
        \    ...,\n    motorN, startN, stopN,\n\nMotors can be any 'settable' object\
        \ (motor, temp controller, etc.)"
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: number of points
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: num
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  rel_set:
    description: Set a value relative to current value. Optionally, wait before continuing.
    module: bluesky.plan_stubs
    name: rel_set
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - description: passed to obj.set()
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: identifier used by 'wait'; None by default
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - default: 'False'
      description: 'If True, wait for completion before processing any more messages.

        False by default.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: wait
    - description: passed to obj.set()
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: true
  rel_spiral:
    description: Relative spiral scan
    module: bluesky.plans
    name: rel_spiral
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_motor
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_motor
    - description: x width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_range
    - description: y width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_range
    - description: Delta radius along the minor axis of the ellipse.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: dr
    - description: Number of theta steps
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: nth
    - default: None
      description: 'Delta radius along the major axis of the ellipse. If None, it

        defaults to dr.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: dr_y
    - default: '0.0'
      description: Tilt angle in radians, default 0.0
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: tilt
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  rel_spiral_fermat:
    description: Relative fermat spiral scan
    module: bluesky.plans
    name: rel_spiral_fermat
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_motor
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_motor
    - description: x width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_range
    - description: y width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_range
    - description: delta radius
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: dr
    - description: radius gets divided by this
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: factor
    - default: None
      description: 'Delta radius along the major axis of the ellipse, if not specifed

        defaults to dr'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: dr_y
    - default: '0.0'
      description: Tilt angle in radians, default 0.0
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: tilt
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  rel_spiral_square:
    description: Relative square spiral scan, centered around current (x, y) position.
    module: bluesky.plans
    name: rel_spiral_square
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_motor
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_motor
    - description: x width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_range
    - description: y width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_range
    - description: number of x axis points
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_num
    - description: Number of y axis points.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_num
    - default: None
      description: 'hook for cutomizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plans.one_nd_step` (the default) for

        details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  relative_adaptive_scan:
    description: Relative scan over one variable with adaptively tuned step size.
    module: bluesky.plans
    name: rel_adaptive_scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: data field whose output is the focus of the adaptive tuning
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: target_field
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - description: starting position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start
    - description: ending position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stop
    - description: smallest step for fast-changing regions
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: min_step
    - description: largest step for slow-chaning regions
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: max_step
    - description: desired fractional change in detector signal between steps
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: target_delta
    - description: whether backward steps are allowed -- this is concern with some
        motors
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: backstep
    - default: '0.8'
      description: threshold for going backward and rescanning a region, default is
        0.8
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: threshold
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  relative_inner_product_scan:
    module: bluesky.plans
    name: relative_inner_product_scan
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  relative_list_scan:
    description: Scan over one variable in steps relative to current position.
    module: bluesky.plans
    name: rel_list_scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: "For one dimension, ``motor, [point1, point2, ....]``.\nIn general:\n\
        \n.. code-block:: python\n\n    motor1, [point1, point2, ...],\n    motor2,\
        \ [point1, point2, ...],\n    ...,\n    motorN, [point1, point2, ...]\n\n\
        Motors can be any 'settable' object (motor, temp controller, etc.)\npoint1,\
        \ point2 etc are relative to the current location."
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: 'hook for customizing action of inner loop (messages per step)

        Expected signature: ``f(detectors, motor, step)``'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  relative_log_scan:
    description: Scan over one variable in log-spaced steps relative to current position.
    module: bluesky.plans
    name: rel_log_scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - description: starting position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start
    - description: ending position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stop
    - description: number of steps
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - default: None
      description: 'hook for customizing action of inner loop (messages per step)

        Expected signature: ``f(detectors, motor, step)``'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  relative_outer_product_scan:
    description: Scan over a mesh relative to current position.
    module: bluesky.plans
    name: rel_grid_scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: 'which axes should be snaked, either ``False`` (do not snake any
        axes),

        ``True`` (snake all axes) or a list of axes to snake. "Snaking" an axis

        is defined as following snake-like, winding trajectory instead of a

        simple left-to-right trajectory. The elements of the list are motors

        that are listed in `args`. The list must not contain the slowest

        (first) motor, since it can''t be snaked.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: snake_axes
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  relative_scan:
    description: Scan over one multi-motor trajectory relative to current position.
    module: bluesky.plans
    name: rel_scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: "For one dimension, ``motor, start, stop``.\nIn general:\n\n..\
        \ code-block:: python\n\n    motor1, start1, stop1,\n    motor2, start2, start2,\n\
        \    ...,\n    motorN, startN, stopN,\n\nMotors can be any 'settable' object\
        \ (motor, temp controller, etc.)"
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: number of points
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: num
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  relative_spiral:
    description: Relative spiral scan
    module: bluesky.plans
    name: rel_spiral
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_motor
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_motor
    - description: x width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_range
    - description: y width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_range
    - description: Delta radius along the minor axis of the ellipse.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: dr
    - description: Number of theta steps
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: nth
    - default: None
      description: 'Delta radius along the major axis of the ellipse. If None, it

        defaults to dr.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: dr_y
    - default: '0.0'
      description: Tilt angle in radians, default 0.0
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: tilt
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  relative_spiral_fermat:
    description: Relative fermat spiral scan
    module: bluesky.plans
    name: rel_spiral_fermat
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_motor
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_motor
    - description: x width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_range
    - description: y width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_range
    - description: delta radius
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: dr
    - description: radius gets divided by this
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: factor
    - default: None
      description: 'Delta radius along the major axis of the ellipse, if not specifed

        defaults to dr'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: dr_y
    - default: '0.0'
      description: Tilt angle in radians, default 0.0
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: tilt
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  remove_suspender:
    description: Remove a suspender during a plan.
    module: bluesky.plan_stubs
    name: remove_suspender
    parameters:
    - description: The suspender to remove
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: suspender
    properties:
      is_generator: true
  repeat:
    description: Repeat a plan num times with delay and checkpoint between each repeat.
    module: bluesky.plan_stubs
    name: repeat
    parameters:
    - description: Callable that returns an iterable of Msg objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: plan
    - default: '1'
      description: 'number of readings to take; default is 1


        If None, capture data until canceled'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - default: None
      description: time delay between successive readings; default is 0
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: delay
    properties:
      is_generator: true
  repeater:
    description: Generate n chained copies of the messages from gen_func
    module: bluesky.plan_stubs
    name: repeater
    parameters:
    - description: total number of repetitions; if None, infinite
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: n
    - description: returns generator instance
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: gen_func
    - kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: true
  reset_positions_wrapper:
    description: Return movable devices to their initial positions at the end.
    module: bluesky.preprocessors
    name: reset_positions_wrapper
    parameters:
    - description: a generator, list, or similar containing `Msg` objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: plan
    - default: None
      description: If default (None), apply to all devices that are moved by the plan.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: devices
    properties:
      is_generator: true
  robot_wrapper:
    description: Wrap a plan in load/unload messages.
    name: robot_wrapper
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: plan
    - description: must contain 'position'; optionally also 'geometry'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: sample
    properties:
      is_generator: true
  sample_aware_count:
    description: A wrapper around count that tries to mimic xpdacq.
    name: sample_aware_count
    parameters:
    - annotation:
        type: int
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: sample_num
    - annotation:
        type: float
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: exposure
    - default: None
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  save:
    description: Close a bundle of readings and emit a completed Event document.
    module: bluesky.plan_stubs
    name: save
    parameters: []
    properties:
      is_generator: true
  scan:
    description: Scan over one multi-motor trajectory.
    module: bluesky.plans
    name: scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: "For one dimension, ``motor, start, stop``.\nIn general:\n\n..\
        \ code-block:: python\n\n    motor1, start1, stop1,\n    motor2, start2, start2,\n\
        \    ...,\n    motorN, startN, stopN\n\nMotors can be any 'settable' object\
        \ (motor, temp controller, etc.)"
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: number of points
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: num
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  scan_nd:
    description: Scan over an arbitrary N-dimensional trajectory.
    module: bluesky.plans
    name: scan_nd
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: cycler.Cycler object mapping movable interfaces to positions
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: cycler
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  set_gas:
    description: short plan to set the gas
    name: set_gas
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: gas_in
    properties:
      is_generator: true
  shutter_step:
    description: 'customized step to ensure shutter is open before

      reading at each motor point and close shutter after reading'
    module: xpdacq.beamtime
    name: shutter_step
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: step
    properties:
      is_generator: true
  simple_ct:
    description: A minimal wrapper around count that adjusts exposure time.
    name: simple_ct
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: dets
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: exposure
    - default: None
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  single_gen:
    description: Turn a single message into a plan
    module: bluesky.utils
    name: single_gen
    parameters:
    - description: a single message
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: msg
    properties:
      is_generator: true
  sleep:
    description: Tell the RunEngine to sleep, while asynchronously doing other processing.
    module: bluesky.plan_stubs
    name: sleep
    parameters:
    - description: seconds
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: time
    properties:
      is_generator: true
  spiral:
    description: Spiral scan, centered around (x_start, y_start)
    module: bluesky.plans
    name: spiral
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_motor
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_motor
    - description: x center
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_start
    - description: y center
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_start
    - description: x width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_range
    - description: y width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_range
    - description: Delta radius along the minor axis of the ellipse.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: dr
    - description: Number of theta steps
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: nth
    - default: None
      description: 'Delta radius along the major axis of the ellipse. If None, defaults
        to

        dr.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: dr_y
    - default: '0.0'
      description: Tilt angle in radians, default 0.0
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: tilt
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  spiral_fermat:
    description: Absolute fermat spiral scan, centered around (x_start, y_start)
    module: bluesky.plans
    name: spiral_fermat
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_motor
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_motor
    - description: x center
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_start
    - description: y center
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_start
    - description: x width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_range
    - description: y width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_range
    - description: delta radius
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: dr
    - description: radius gets divided by this
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: factor
    - default: None
      description: 'Delta radius along the major axis of the ellipse, if not specifed

        defaults to dr.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: dr_y
    - default: '0.0'
      description: Tilt angle in radians, default 0.0
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: tilt
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  spiral_square:
    description: Absolute square spiral scan, centered around (x_center, y_center)
    module: bluesky.plans
    name: spiral_square
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_motor
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_motor
    - description: x center
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_center
    - description: y center
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_center
    - description: x width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_range
    - description: y width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_range
    - description: number of x axis points
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_num
    - description: Number of y axis points.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_num
    - default: None
      description: 'hook for cutomizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plans.one_nd_step` (the default) for

        details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  stage:
    description: '''Stage'' a device (i.e., prepare it for use, ''arm'' it).'
    module: bluesky.plan_stubs
    name: stage
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    properties:
      is_generator: true
  stop:
    description: Stop a device.
    module: bluesky.plan_stubs
    name: stop
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    properties:
      is_generator: true
  subs_wrapper:
    description: Subscribe callbacks to the document stream; finally, unsubscribe.
    module: bluesky.preprocessors
    name: subs_wrapper
    parameters:
    - description: a generator, list, or similar containing `Msg` objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: plan
    - description: "Documents of each type are routed to a list of functions.\nInput\
        \ is normalized to a dict of lists of functions, like so:\n\nNone -> {'all':\
        \ [], 'start': [], 'stop': [], 'event': [],\n         'descriptor': []}\n\n\
        func -> {'all': [func], 'start': [], 'stop': [], 'event': [],\n         'descriptor':\
        \ []}\n\n[f1, f2] -> {'all': [f1, f2], 'start': [], 'stop': [], 'event': [],\n\
        \             'descriptor': []}\n\n{'event': [func]} ->  {'all': [], 'start':\
        \ [], 'stop': [],\n                       'event': [func], 'descriptor': []}\n\
        \nSignature of functions must conform to `f(name, doc)` where\nname is one\
        \ of {'all', 'start', 'stop', 'event', 'descriptor'} and\ndoc is a dictionary."
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: subs
    properties:
      is_generator: true
  subscribe:
    description: Subscribe the stream of emitted documents.
    module: bluesky.plan_stubs
    name: subscribe
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: name
    - description: 'Expected signature: ``f(name, doc)`` where ``name`` is one of
        the

        strings above (''all, ''start'', ...) and ``doc`` is a dict'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: func
    properties:
      is_generator: true
  trigger:
    description: Trigger and acquisition. Optionally, wait for it to complete.
    module: bluesky.plan_stubs
    name: trigger
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - default: None
      description: identifier used by 'wait'; None by default
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - default: 'False'
      description: 'If True, wait for completion before processing any more messages.

        False by default.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: wait
    properties:
      is_generator: true
  trigger_and_read:
    description: Trigger and read a list of detectors and bundle readings into one
      Event.
    module: bluesky.plan_stubs
    name: trigger_and_read
    parameters:
    - description: devices to trigger (if they have a trigger method) and then read
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: devices
    - default: '''primary'''
      description: 'event stream name, a convenient human-friendly identifier; default

        name is ''primary'''
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: name
    properties:
      is_generator: true
  tseries:
    description: 'Capture how ever many exposures are needed to get a total exposure

      of the given value, and divide those into files of ''num'' exposures

      each, summed.'
    name: tseries
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: sample
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: exposure
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    properties:
      is_generator: true
  tseries_gas_plan:
    description: tseries-type scan with rga gas reading
    name: tseries_gas_plan
    parameters:
    - description: List of detectors will be triggered and recored.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: 'e.g., ''He'', default is ''He''

        These gas must be in `gas.gas_list` but they may be in any order.'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: gas_in
    - description: exposure time in seconds
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: exp_time
    - default: '1'
      description: delay between exposures in seconds
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: delay
    - default: '1'
      description: number of exposures
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num_exp
    - default: None
      description: a list of rga masses appearing in a live table
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: rga_masses
    properties:
      is_generator: true
  tune_centroid:
    description: 'plan: tune a motor to the centroid of signal(motor)'
    module: bluesky.plans
    name: tune_centroid
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: detector field whose output is to maximize
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: signal
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - description: start of range
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start
    - description: 'end of range, note: start < stop'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stop
    - description: smallest step size to use.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: min_step
    - default: '10'
      description: number of points with each traversal, default = 10
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - default: '3.0'
      description: 'used in calculating new range after each pass


        note: step_factor > 1.0, default = 3'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: step_factor
    - default: 'False'
      description: if False (default), always scan from start to stop
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: snake
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  tweak:
    description: Move and motor and read a detector with an interactive prompt.
    module: bluesky.plans
    name: tweak
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detector
    - description: data field whose output is the focus of the adaptive tuning
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: target_field
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - description: initial suggestion for step size
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  unload_sample:
    name: unload_sample
    parameters: []
    properties:
      is_generator: true
  unmonitor:
    description: Stop monitoring.
    module: bluesky.plan_stubs
    name: unmonitor
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    properties:
      is_generator: true
  unstage:
    description: '''Unstage'' a device (i.e., put it in standby, ''disarm'' it).'
    module: bluesky.plan_stubs
    name: unstage
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    properties:
      is_generator: true
  unsubscribe:
    description: Remove a subscription.
    module: bluesky.plan_stubs
    name: unsubscribe
    parameters:
    - description: token returned by processing a 'subscribe' message
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: token
    properties:
      is_generator: true
  wait:
    description: Wait for all statuses in a group to report being finished.
    module: bluesky.plan_stubs
    name: wait
    parameters:
    - default: None
      description: Identifier given to `abs_set`, `rel_set`, `trigger`; None by default
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: group
    properties:
      is_generator: true
  wait_for:
    description: 'Low-level: wait for a list of ``asyncio.Future`` objects to set
      (complete).'
    module: bluesky.plan_stubs
    name: wait_for
    parameters:
    - description: collection of asyncio.Future objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: futures
    - description: passed through to ``asyncio.wait()``
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: true
  x2x_scan:
    description: Relatively scan over two motors in a 2:1 ratio
    module: bluesky.plans
    name: x2x_scan
    parameters:
    - description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: The second motor will move half as much as the first
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor1
    - description: The second motor will move half as much as the first
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor2
    - description: 'The relative limits of the first motor.  The second motor

        will move between ``start / 2`` and ``stop / 2``'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start
    - description: 'The relative limits of the first motor.  The second motor

        will move between ``start / 2`` and ``stop / 2``'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stop
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - default: None
      description: 'hook for cutomizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
